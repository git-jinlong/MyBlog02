<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xiao.blog.mapper.ArticleMapper" >
  <resultMap id="BaseResultMap" type="com.xiao.blog.vo.ArticleVO" >

    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="article_digest" property="articleDigest" jdbcType="VARCHAR" />
    <result column="article_title" property="articleTitle" jdbcType="VARCHAR" />
    <result column="article_content" property="articleContent" jdbcType="LONGVARCHAR" />
    <result column="article_html_content" property="articleHtmlContent" jdbcType="LONGVARCHAR" />
    <result column="create_date" property="createDate" jdbcType="VARCHAR" />
    <result column="update_date" property="updateDate" jdbcType="VARCHAR" />
    <result column="likes" property="likes" jdbcType="INTEGER" />
    <result column="read_count" property="readCount" jdbcType="INTEGER" />
    <result column="top" property="top" jdbcType="INTEGER" />
    <result column="editor_type" property="editorType" jdbcType="INTEGER" />
    <result column="draft" property="draft" jdbcType="INTEGER" />
    <result column="privacy" property="privacy" jdbcType="INTEGER" />

    <association property="user" javaType="com.xiao.blog.model.User">
      <id column="user_id" property="id" jdbcType="INTEGER" />
      <result column="name" property="name" jdbcType="VARCHAR" />
    </association>

    <association property="lastArticle" javaType="com.xiao.blog.model.Article">
      <id column="last_article_id" property="id" jdbcType="INTEGER" />
      <result column="last_article_title" property="articleTitle" jdbcType="VARCHAR" />
    </association>

    <association property="nextArticle" javaType="com.xiao.blog.model.Article">
      <id column="next_article_id" property="id" jdbcType="INTEGER" />
      <result column="next_article_title" property="articleTitle" jdbcType="VARCHAR" />
    </association>

    <association property="categories" javaType="com.xiao.blog.model.Categories">
      <id column="categories_id" property="id" jdbcType="INTEGER" />
      <result column="categories_name" property="name" jdbcType="VARCHAR" />
    </association>

    <collection property="tagsList" ofType="com.xiao.blog.model.Tags">
      <id column="tags_id" property="id" jdbcType="INTEGER" />
      <result column="tags_name" property="name" jdbcType="VARCHAR" />
    </collection>

  </resultMap>


  <insert id="insert" parameterType="com.xiao.blog.model.Article" >

    insert into blog_article (id, article_abstract,
      article_title, create_date, likes,
      read_count, update_date, last_article_id,
      next_article_id, comment_count, istop,
      editor_type, isdraft, isprivacy,
      article_content, article_html_content
      )
    values (#{id,jdbcType=INTEGER}, #{articleAbstract,jdbcType=VARCHAR},
      #{articleTitle,jdbcType=VARCHAR}, #{createDate,jdbcType=VARCHAR}, #{likes,jdbcType=INTEGER},
      #{readCount,jdbcType=INTEGER}, #{updateDate,jdbcType=VARCHAR}, #{lastArticleId,jdbcType=INTEGER},
      #{nextArticleId,jdbcType=INTEGER}, #{commentCount,jdbcType=INTEGER}, #{istop,jdbcType=INTEGER},
      #{editorType,jdbcType=INTEGER}, #{isdraft,jdbcType=INTEGER}, #{isprivacy,jdbcType=INTEGER},
      #{articleContent,jdbcType=LONGVARCHAR}, #{articleHtmlContent,jdbcType=LONGVARCHAR}
      )
  </insert>



  <insert id="insertArticleLabelRelation"  >

    insert into blog_article_label (article_id, label_id)
    values
    <foreach collection="list" item="item" index="index" separator=",">
      ( #{item.articleId,jdbcType=INTEGER}, #{item.labelId,jdbcType=INTEGER} )
    </foreach>
  </insert>

  <delete id="deleteArticleById" parameterType="java.lang.Integer" >
    delete from blog_article where id = #{id,jdbcType=INTEGER}
  </delete>

  <update id="updateArticleById" parameterType="com.xiao.blog.model.Article" >

    update blog_article
    set
      article_abstract = #{articleAbstract,jdbcType=VARCHAR},
      article_title = #{articleTitle,jdbcType=VARCHAR},
      likes = #{likes,jdbcType=INTEGER},
      read_count = #{readCount,jdbcType=INTEGER},
      update_date = #{updateDate,jdbcType=VARCHAR},
      last_article_id = #{lastArticleId,jdbcType=INTEGER},
      next_article_id = #{nextArticleId,jdbcType=INTEGER},
      top = #{top,jdbcType=INTEGER},
      editor_type = #{editorType,jdbcType=INTEGER},
      draft = #{draft,jdbcType=INTEGER},
      privacy = #{privacy,jdbcType=INTEGER},
      article_content = #{articleContent,jdbcType=LONGVARCHAR},
      article_html_content = #{articleHtmlContent,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="getArticleById" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
        id,
        article_abstract,
        article_title,
        create_date,
        likes,
        read_count,
        update_date,
        last_article_id,
        next_article_id,
        comment_count,
        top,
        editor_type,
        draft,
        privacy,
        article_content,
        article_html_content
    from blog_article
    where id = #{id,jdbcType=INTEGER}
  </select>

  <select id="getArticles" resultMap="BaseResultMap" >

    select
        article.id,
        article.article_digest,
        article.article_title,
        article.likes,
        article.read_count,
        article.create_date,
        article.update_date,
        article.top,
        article.editor_type,
        article.draft,
        article.privacy,
        article.user_id,
        u.name name,
        article.categories_id,
        categories.name categories_name,
        tags.id tags_id,
        tags.name tags_name

    from blog_article article
    left join sys_user u on article.user_id = u.id
    left join blog_categories categories on article.categories_id = categories.id
    left join blog_article_tags bat on article.id = bat.article_id
    left join blog_tags tags on tags.id = bat.tags_id
    where
    article.user_id = #{userId,jdbcType=INTEGER}
  </select>
</mapper>